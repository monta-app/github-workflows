name: Build Docker Image
on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
        default: 'eu-west-1'
        description: 'AWS region'
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
      service:
        required: true
        type: string
        description: 'Name of the service being released'
    secrets:
      GHL_USERNAME:
        required: true
        description: 'Github Username (Gradle plugin)'
      GHL_PASSWORD:
        required: true
        description: 'Github Password (Gradle plugin)'
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS access key id'
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS secret access key'
      SLACK_DEPLOYMENT_WEBHOOK_URL:
        required: true
        description: 'Deployment alert slack webhook url'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Print runner info
        run: |
          lsb_release -d
          uname -a
          free -h
          df -h
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Test project
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
        run: ./gradlew --no-daemon test
        shell: bash
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: |
            build/reports/tests/test
            /home/runner/.gradle/daemon/**/daemon-*.out.log
          retention-days: 2
      - name: Clean up project
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
        run: ./gradlew --no-daemon clean
        shell: bash
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build docker container
        id: build-container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ inputs.service }}
          STAGE: ${{ inputs.stage }}
        run: |
          ECR_IMAGE_URL=$ECR_REGISTRY/$SERVICE_NAME-$STAGE
          docker build --build-arg=GHL_USERNAME=${{ secrets.GHL_USERNAME }} --build-arg=GHL_PASSWORD=${{ secrets.GHL_PASSWORD }} -t $ECR_IMAGE_URL:$IMAGE_TAG .
          docker push $ECR_IMAGE_URL:$IMAGE_TAG
          docker tag $ECR_IMAGE_URL:$IMAGE_TAG $ECR_IMAGE_URL:latest
          docker push $ECR_IMAGE_URL:latest
          echo "::set-output name=ECR_IMAGE_URL:$IMAGE_TAG::$ECR_IMAGE_URL:$IMAGE_TAG"
        shell: bash
      - name: Notify slack with success or error
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          job_name: Build
          status: ${{ job.status }}
          fields: repo,message,commit,author,took,ref
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
