name: Deploy
on:
  workflow_call:
    inputs:
      service-identifier:
        required: true
        type: string
        description: 'Identifier of the service being released i.e ocpp, vehicle, server, wallet.'
      gradle-module:
        required: false
        type: string
        description: 'Name of the gradle module being tested'
      region:
        required: true
        type: string
        default: 'eu-west-1'
        description: 'AWS region'
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
    secrets:
      GHL_USERNAME:
        required: true
        description: 'Github Username (Gradle plugin)'
      GHL_PASSWORD:
        required: true
        description: 'Github Password (Gradle plugin)'
      MANIFEST_REPO_PAT:
        required: true
        description: 'GitHub personal access token'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read
  actions: read # This is required for 8398a7/action-slack

jobs:
  deploy:
    name: Update OpenAPI Spec
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'gradle'
      - name: Install LinkerD CLI
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
      - name: Update Path with LinkerD CLI
        shell: bash
        run: |
          echo "/home/runner/.linkerd2/bin" >> $GITHUB_PATH
      - name: Build Open API Spec
        shell: bash
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
        run: |
          if [ -n "$GRADLE_MODULE" ]; then
              ./gradlew $GRADLE_MODULE:buildLayers
          else
              ./gradlew buildLayers
          fi
      - name: Create service profile
        id: create-service-profile
        shell: bash
        env:
          SERVICE_IDENTIFIER: ${{ inputs.service-identifier }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
          STAGE: ${{ inputs.stage }}
        run: |
          # Hardcoded target directory
          TARGET_DIR="build/tmp/kapt3/classes/main/META-INF/swagger"
          
          # Check if a gradle-module parameter is supplied and if so, prepend it to the target directory
          if [ -n "$GRADLE_MODULE" ]; then
              TARGET_DIR="${GRADLE_MODULE}/${TARGET_DIR}"
          fi
          
          # Ensure the target directory exists
          if [ ! -d "${TARGET_DIR}" ]; then
              echo "Error: Target directory '${TARGET_DIR}' does not exist."
              exit 1
          fi
          
          cd $TARGET_DIR
          
          # Find the first .yml file in the target directory
          YML_FILE=$(find . -type f -name '*.yml' | head -n 1)
          YML_FILE_NAME_WITH_EXTENSION=$(basename "$YML_FILE")
          YML_FILE_NAME="${YML_FILE_NAME_WITH_EXTENSION%.*}"
          
          # Check if a .yml file was found and display the result or an error message
          if [ -z "${YML_FILE}" ]; then
              echo "No .yml file found in ${TARGET_DIR}."
              exit 1
          fi
          
          linkerd profile --ignore-cluster --open-api $YML_FILE $YML_FILE_NAME >> service-profile.yaml
          
          SERVICE_PROFILE=$(realpath service-profile.yaml)
          DESTINATION_PATH="apps/${SERVICE_IDENTIFIER}/${STAGE}/app/templates/service-profile.yaml"
          
          echo "service-profile-path=$SERVICE_PROFILE" >> "$GITHUB_OUTPUT"
          echo "destination-path=$DESTINATION_PATH" >> "$GITHUB_OUTPUT"
      - name: Push service profile to repository
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.MANIFEST_REPO_PAT }}
        with:
          source_file: ${{ steps.create-service-profile.outputs.service-profile-path }}
          destination_repo: 'monta-app/kube-manifests'
          destination_folder: ${{ steps.create-service-profile.outputs.destination-path }}
          user_email: "action@github.com"
          user_name: "GitHub Action"
          commit_message: 'chore: updated open API spec'