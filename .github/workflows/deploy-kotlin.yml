name: Deploy

on:
  workflow_call:
    inputs:
      runner-size:
        required: false
        type: string
        description: "Runner to use for the job (normal, or large)"
        default: "normal"
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
      service-name:
        required: true
        type: string
        description: 'Proper name for your service i.e OCPP Service, Vehicle Service'
      service-emoji:
        required: true
        type: string
        description: 'An emoji to identify your service by :)'
      service-identifier:
        required: true
        type: string
        description: 'Identifier of the service being released i.e ocpp, vehicle, server, wallet.'
      gradle-module:
        required: false
        type: string
        description: 'Name of the Gradle module being tested'
      java-version:
        required: false
        type: string
        default: "21"
        description: 'Java version to use'
      gradle-args:
        required: false
        type: string
        default: "--no-daemon --parallel"
        description: 'Additional Gradle arguments'
      region:
        required: false
        type: string
        default: "eu-west-1"
        description: 'AWS region to deploy to'
      docker-file-name:
        required: false
        type: string
        description: Name of the docker file to be built
        default: "Dockerfile"
      additional-build-args:
        required: false
        type: string
        description: 'Additional build arguments for Docker'
      ecr-repository-name:
        required: false
        type: string
        description: 'ECR repository name override'
      enable-release-tag:
        required: false
        type: boolean
        default: false
        description: 'Enable automatic release tag creation on workflow_dispatch'
      release-tag-prefix:
        required: false
        type: string
        description: "Optional prefix for release tag names. If provided, creates tags like 'prefix-YYYY-MM-DD-HH-MM'. Leave empty for date-only tags."
      enable-changelog:
        required: false
        type: boolean
        default: false
        description: 'Enable changelog generation after deployment'
      changelog-tag-pattern:
        required: false
        type: string
        description: 'Regex pattern for matching tag patterns (group 1 should match version) - example: processor-(.*)'
      changelog-path-exclude-pattern:
        required: false
        type: string
        description: 'Regex pattern for excluding file paths from changelog - example: ^gateway/'
      run-tests:
        required: false
        type: boolean
        default: true
        description: 'Run tests before deployment'

    secrets:
      GHL_USERNAME:
        required: true
        description: 'GitHub username for Gradle plugin'
      GHL_PASSWORD:
        required: true
        description: 'GitHub password/token for Gradle plugin'
      AWS_ACCOUNT_ID:
        required: true
        description: 'AWS Account ID for ECR and deployment access'
      SLACK_APP_TOKEN:
        required: true
        description: 'Slack app-level token for workflow notifications'
      MANIFEST_REPO_PAT:
        required: true
        description: 'GitHub PAT to commit/push to kube-manifests repo'
      SENTRY_AUTH_TOKEN:
        required: false
        description: 'Sentry auth token, passed as Docker build secret'
      AWS_CDN_ACCESS_KEY_ID:
        required: false
        description: 'CDN access key ID for S3 access, injected into Docker image'
      AWS_CDN_SECRET_ACCESS_KEY:
        required: false
        description: 'CDN secret access key for S3 access, injected into Docker image'
      LOKALISE_TOKEN:
        required: false
        description: 'Lokalise token for Lokalise API'
      LOKALISE_PROJECT_ID:
        required: false
        description: 'Lokalise project ID for Lokalise API'

permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  initialize:
    name: Initialize
    needs: [ create-release-tag ]
    if: always() && (needs.create-release-tag.result == 'success' || needs.create-release-tag.result == 'skipped')
    uses: ./.github/workflows/component-initialize.yml
    with:
      service-name: ${{ inputs.service-name }}
      service-emoji: ${{ inputs.service-emoji }}
    secrets:
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
  test:
    name: Test
    needs: initialize
    if: always() && inputs.run-tests && needs.initialize.result == 'success'
    uses: ./.github/workflows/component-test-kotlin.yml
    with:
      runner-size: ${{ inputs.runner-size }}
      service-name: ${{ inputs.service-name }}
      service-emoji: ${{ inputs.service-emoji }}
      gradle-module: ${{ inputs.gradle-module }}
      java-version: ${{ inputs.java-version }}
      gradle-args: ${{ inputs.gradle-args }}
      slack-message-id: ${{ needs.initialize.outputs.slack-message-id }}
    secrets:
      GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
      GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
  build:
    name: Build
    needs: initialize
    if: always() && needs.initialize.result == 'success'
    uses: ./.github/workflows/component-build.yml
    with:
      runner-size: ${{ inputs.runner-size }}
      stage: ${{ inputs.stage }}
      service-name: ${{ inputs.service-name }}
      service-emoji: ${{ inputs.service-emoji }}
      service-identifier: ${{ inputs.service-identifier }}
      region: ${{ inputs.region }}
      docker-file-name: ${{ inputs.docker-file-name }}
      additional-build-args: ${{ inputs.additional-build-args }}
      ecr-repository-name: ${{ inputs.ecr-repository-name }}
      slack-message-id: ${{ needs.initialize.outputs.slack-message-id }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
      GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
      GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      AWS_CDN_ACCESS_KEY_ID: ${{ secrets.AWS_CDN_ACCESS_KEY_ID }}
      AWS_CDN_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDN_SECRET_ACCESS_KEY }}
      LOKALISE_TOKEN: ${{ secrets.LOKALISE_TOKEN }}
      LOKALISE_PROJECT_ID: ${{ secrets.LOKALISE_PROJECT_ID }}
  deploy:
    name: Deploy
    needs:
      - initialize
      - test
      - build
    if: always() && needs.initialize.result == 'success' && (!inputs.run-tests || needs.test.result == 'success') && needs.build.result == 'success'
    uses: ./.github/workflows/component-deploy.yml
    with:
      service-name: ${{ inputs.service-name }}
      service-emoji: ${{ inputs.service-emoji }}
      service-identifier: ${{ inputs.service-identifier }}
      stage: ${{ inputs.stage }}
      image-tag: ${{ needs.build.outputs.image-tag }}
      slack-message-id: ${{ needs.initialize.outputs.slack-message-id }}
    secrets:
      MANIFEST_REPO_PAT: ${{ secrets.MANIFEST_REPO_PAT }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
  create-release-tag:
    name: Create Release Tag
    if: always() && inputs.enable-release-tag && needs.deploy.result == 'success'
    needs: deploy
    uses: ./.github/workflows/create-release-tag.yml
    with:
      prefix: ${{ inputs.release-tag-prefix }}
  create-changelog:
    name: Create and Publish Changelog
    needs: deploy
    if: always() && inputs.enable-changelog && needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Run changelog cli action
        uses: monta-app/changelog-cli-action@main
        with:
          service-name: ${{ inputs.service-name }}
          github-release: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-tag-pattern: ${{ inputs.changelog-tag-pattern }}
          github-path-exclude-pattern: ${{ inputs.changelog-path-exclude-pattern }}
          jira-app-name: "montaapp"
          output: "slack"
          slack-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel: "#releases"
