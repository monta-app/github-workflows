name: Deploy
on:
  workflow_call:
    inputs:
      service-name:
        required: false
        type: string
        description: 'Proper name for your service i.e OCPP Service, Vehicle Service'
      service-emoji:
        required: false
        type: string
        description: 'An emoji to identify your service by :)'
      service-identifier:
        required: true
        type: string
        description: 'Identifier of the service being released i.e ocpp, vehicle, server, wallet.'
      gradle-module:
        required: false
        type: string
        description: 'Name of the gradle module being tested'
      region:
        required: true
        type: string
        default: 'eu-west-1'
        description: 'AWS region'
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
      docker-file-name:
        required: false
        type: string
        description: Name of the docker file to be built
        default: "Dockerfile"
      java-distribution:
        required: false
        type: string
        default: "corretto"
      java-version:
        required: false
        type: string
        default: "17"
      java-docker-version:
        required: false
        type: string
        default: "17.0.8"
      slack-channel-id:
        required: false
        type: string
        description: 'ID of slack channel to notify with build status. Default value is the "deployment" channel, only override in special cases.'
        default: "C01KL9FUPNK"
      upload-open-api:
        required: false
        type: boolean
        default: false
        description: 'Upload open api specification to the kube manifests repository'
      arm-build:
        required: false
        type: boolean
        default: false
        description: 'Build both an arm64 image in addition to the x64 image'
      push-to-manifests:
        required: false
        type: boolean
        default: true
        description: 'If false, will use ArgoCD Updater instead of pushing to kube-manifests'
    secrets:
      GHL_USERNAME:
        required: true
        description: 'Github Username (Gradle plugin)'
      GHL_PASSWORD:
        required: true
        description: 'Github Password (Gradle plugin)'
      AWS_ACCOUNT_ID:
        required: false
        description: 'AWS account id'
      AWS_ACCESS_KEY_ID:
        required: false
        description: 'AWS access key id'
      AWS_SECRET_ACCESS_KEY:
        required: false
        description: 'AWS secret access key'
      MANIFEST_REPO_PAT:
        required: true
        description: 'GitHub personal access token'
      SLACK_APP_TOKEN:
        required: true
        description: 'Slack app token'
      ARGOCD_TOKEN:
        required: false # REQUIRED WHEN USING `upload-open-api`!!!
        description: 'ArgoCD token - should be set to ARGOCD_TOKEN_STAGING / ARGOCD_TOKEN_PRODUCTION'
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read
  actions: read # This is required for 8398a7/action-slack

jobs:
  # needed in order for test and build to start independently while updating the same slack message
  init:
    name: Sending first Slack message
    runs-on: ubuntu-latest
    env:
      argocd-token: ${{ secrets.ARGOCD_TOKEN }}
    timeout-minutes: 5
    outputs:
      slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
      runners: ${{ toJSON(steps.*.outputs.runner) }}
      service-cluster: ${{ steps.get-manifest-info.outputs.cluster }}
      service-namespace: ${{ steps.get-manifest-info.outputs.namespace }}
      service-name: ${{ steps.get-manifest-info.outputs.service-name }}
      argocd-server: ${{ steps.set-argocd-server.outputs.argocd-hostname }}
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          job-type: "test"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
      # calculates whether should run also on arm
      - id: x64
        run: echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
      - id: arm64
        if: ${{ inputs.arm-build }}
        run: echo "runner=self-hosted-arm64" >> $GITHUB_OUTPUT
      - id: verify-argocd-token
        if: ${{ ! inputs.push-to-manifests }}
        shell: bash
        run: |
          if [ "${{ secrets.ARGOCD_TOKEN }}" == '' ]; then
            echo "::error::MUST INPUT ARGOCD_TOKEN SECRET"
            echo "ARGOCD_TOKEN_STAGING / ARGOCD_TOKEN_PRODUCTION"
            exit 1
          fi
      - id: set-argocd-server
        if: ${{ env.argocd-token != '' }}
        env:
          STAGE: ${{ inputs.stage }}
        run: |
          if [[ $STAGE =~ dev|staging ]]; then
            ARGOCD_HOSTNAME="argocd.staging.monta.app"
          else
            ARGOCD_HOSTNAME="argocd.monta.app"
          fi
          echo "argocd-hostname=$ARGOCD_HOSTNAME" >> "$GITHUB_OUTPUT"
      - name: Get manifest info
        id: get-manifest-info
        if: ${{ inputs.upload-open-api }}
        shell: bash
        env:
          SERVICE_IDENTIFIER: ${{ inputs.service-identifier }}
          STAGE: ${{ inputs.stage }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_SERVER: ${{ steps.set-argocd-server.outputs.argocd-hostname }}
        run: |
          if [ "${{ secrets.ARGOCD_TOKEN }}" == '' ]; then
            echo "::error::MUST INPUT ARGOCD_TOKEN SECRET"
            echo "ARGOCD_TOKEN_STAGING / ARGOCD_TOKEN_PRODUCTION"
            exit 1
          fi
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x argocd
          K8S_CLUSTER=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app get argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} -o yaml | yq '.spec.destination.name')
          if [ $K8S_CLUSTER == "main-prod" ]; then
            export K8S_CLUSTER="main-production"
          fi
          echo "cluster=$K8S_CLUSTER" >> "$GITHUB_OUTPUT"
          K8S_NAMESPACE=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app get argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} -o yaml | yq '.spec.destination.namespace')
          echo "namespace=$K8S_NAMESPACE" >> "$GITHUB_OUTPUT"
          SERVICE_NAME=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app manifests argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} | yq 'select(di == 1) | .metadata.labels."app.kubernetes.io/name"')

          if [ $SERVICE_NAME = "null" ]; then
            SERVICE_NAME=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app manifests argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} | yq 'select(di == 1) | .metadata.labels."app"')
          fi

          echo "service-name=$SERVICE_NAME" >> "$GITHUB_OUTPUT"
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: failure()
        with:
          job-type: "test"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}

  test:
    name: Test
    needs: init
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Download curl
        id: download-curl
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y curl
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'
      - name: Test project
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$GRADLE_MODULE" ]; then
            ./gradlew --no-daemon test
          else
            ./gradlew --no-daemon $GRADLE_MODULE:test
          fi
        shell: bash
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: |
            build/reports/tests/test
            /home/runner/.gradle/daemon/**/daemon-*.out.log
          retention-days: 2
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: always()
        with:
          job-type: "test"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}

  update-open-api-spec:
    if: ${{ inputs.upload-open-api }}
    name: Update OpenAPI Spec
    needs: [ init, test, build ]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'
      - name: Install LinkerD CLI
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
      - name: Install kubectl CLI
        shell: bash
        run: |
          curl -LO https://dl.k8s.io/release/v1.28.4/bin/linux/amd64/kubectl
          sudo chmod +x kubectl
      - name: Install Teleport
        uses: teleport-actions/setup@v1
        with:
          version: 14.1.5
      - name: Authorize against Teleport
        uses: teleport-actions/auth-k8s@v2
        with:
          proxy: 'teleport.monta.app:443'
          token: github-actions
          kubernetes-cluster: ${{ needs.init.outputs.service-cluster }}
      - name: Update Path with LinkerD CLI
        shell: bash
        run: |
          echo "/home/runner/.linkerd2/bin" >> $GITHUB_PATH
      - name: Build Open API Spec
        shell: bash
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
        run: |
          if [ -n "$GRADLE_MODULE" ]; then
              ./gradlew $GRADLE_MODULE:kaptKotlin
          else
              ./gradlew kaptKotlin
          fi
      - name: Create service profile
        id: create-service-profile
        shell: bash
        env:
          GRADLE_MODULE: ${{ inputs.gradle-module }}
          K8S_NAMESPACE: ${{ needs.init.outputs.service-namespace }}
          SERVICE_NAME: ${{ needs.init.outputs.service-name }}
        run: |
          # Hardcoded target directory
          TARGET_DIR="build/tmp/kapt3/classes/main/META-INF/swagger"

          # Check if a gradle-module parameter is supplied and if so, prepend it to the target directory
          if [ -n "$GRADLE_MODULE" ]; then
              TARGET_DIR="${GRADLE_MODULE}/${TARGET_DIR}"
          fi

          # Ensure the target directory exists
          if [ ! -d "${TARGET_DIR}" ]; then
              echo "Error: Target directory '${TARGET_DIR}' does not exist."
              exit 1
          fi

          cd $TARGET_DIR

          # Find the first .yml file in the target directory
          YML_FILE=$(find . -type f -name '*.yml' | head -n 1)

          # Check if a .yml file was found and display the result or an error message
          if [ -z "${YML_FILE}" ]; then
              echo "No .yml file found in ${TARGET_DIR}."
              exit 1
          fi

          linkerd profile --ignore-cluster -n $K8S_NAMESPACE --open-api $YML_FILE $SERVICE_NAME >> service-profile.yaml
          
          cat <<EOB >> clean-service-profiles.sh
          #!/bin/bash
          yq service-profile.yaml
          yq service-profile.yaml | yq 'del(.spec.routes[].responseClasses)' service-profile.yaml > service-profile-new.yaml
          cat <<EOT >> service-profile-new.yaml
              - condition:
                  method: POST
                name: POST [Default]
              - condition:
                  method: GET
                name: GET [Default]
              - condition:
                  method: PATCH
                name: PATCH [Default]
              - condition:
                  method: PUT
                name: PUT [Default]
              - condition:
                  method: HEAD
                name: HEAD [Default]
              - condition:
                  method: OPTIONS
                name: OPTIONS [Default]
          EOT
          yq service-profile-new.yaml
          EOB

          bash clean-service-profiles.sh
          
          kubectl -n $K8S_NAMESPACE apply -f service-profile-new.yaml

  build:
    name: Build
    needs: init
    runs-on: ${{ matrix.runner-type }}
    timeout-minutes: 30
    strategy:
      matrix:
        runner-type: ${{ fromJSON(needs.init.outputs.runners) }}
    steps:
      - name: Download curl
        if: runner.arch == 'X64'
        id: download-curl
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y curl
      - name: Publish progress message to slack
        if: runner.arch == 'X64'
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          job-type: "build"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Check for secret.AWS_ACCOUNT_ID availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.AWS_ACCOUNT_ID }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi
      - name: Configure AWS credentials via assumed role
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'true'
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-put-image
          role-session-name: push-new-image-to-${{ inputs.service-identifier }}-${{ inputs.stage }}
          aws-region: ${{ inputs.region }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'false'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service-identifier }}-${{ inputs.stage }}
          tags: |
            type=sha,format=long,prefix=,suffix=-${{ runner.arch }}
          flavor: |
            latest=false
            prefix=
            suffix=
      - name: Build
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./${{ inputs.docker-file-name }}
          push: true
          no-cache: true
          build-args: |
            JAVA_VERSION=${{ inputs.java-docker-version }}
            GHL_USERNAME=${{ secrets.GHL_USERNAME }}
            GHL_PASSWORD=${{ secrets.GHL_PASSWORD }}
          # For pruning built image on self-hosted runner based on this run's ID
          labels: |
            GITHUB_RUN_ID=${{ github.run_id }}
            ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

  # needed because can't run slack notifier cli on arm64, so can't update with always() in the same build job
  update_build_fail:
    name: Update Slack message for build fail
    needs: [ init, build ]
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          job-type: "build"
          job-status: ${{ needs.build.result }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}

  update_build_success:
    name: Update Slack message for build success
    needs: [ init, build ]
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          job-type: "build"
          job-status: ${{ needs.build.result }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}

  push-manifest-list:
    name: Push Manifest
    needs: [ init, build, test ]
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          job-type: "deploy"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}
      - name: Check for secret.AWS_ACCOUNT_ID availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.AWS_ACCOUNT_ID }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi
      - name: Configure AWS credentials via assumed role
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'true'
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-put-image
          role-session-name: push-new-image-to-${{ inputs.service-identifier }}-${{ inputs.stage }}
          aws-region: ${{ inputs.region }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'false'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build-push-manifest
        id: build-container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_NAME: ${{ inputs.service-identifier }}
          STAGE: ${{ inputs.stage }}
          ARM_BUILD: ${{ inputs.arm-build }}
        shell: bash
        run: |
          ECR_IMAGE_URL=$ECR_REGISTRY/$SERVICE_NAME-$STAGE

          if [ $ARM_BUILD = "true" ]; then
            docker manifest create $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-ARM64 $ECR_IMAGE_URL:${{ github.sha }}-X64
            docker manifest annotate --arch arm64 $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-ARM64
          else
            docker manifest create $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-X64
          fi
          docker manifest annotate --arch amd64 $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-X64
          docker manifest inspect $ECR_IMAGE_URL:${{ github.sha }}
          docker manifest push $ECR_IMAGE_URL:${{ github.sha }}

          if [ $ARM_BUILD = "true" ]; then
            docker manifest create $ECR_IMAGE_URL:latest $ECR_IMAGE_URL:${{ github.sha }}-ARM64 $ECR_IMAGE_URL:${{ github.sha }}-X64
            docker manifest annotate --arch arm64 $ECR_IMAGE_URL:latest $ECR_IMAGE_URL:${{ github.sha }}-ARM64
          else
            docker manifest create $ECR_IMAGE_URL:latest $ECR_IMAGE_URL:${{ github.sha }}-X64
          fi
          docker manifest annotate --arch amd64 $ECR_IMAGE_URL:latest $ECR_IMAGE_URL:${{ github.sha }}-X64
          docker manifest inspect $ECR_IMAGE_URL:latest
          docker manifest push $ECR_IMAGE_URL:latest
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: failure()
        with:
          job-type: "deploy"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}

  deploy_by_push:
    if: ${{ inputs.push-to-manifests }}
    name: Deploy (push)
    needs:
    - push-manifest-list
    - init
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out manifest repository
        uses: actions/checkout@master
        with:
          repository: monta-app/kube-manifests
          path: 'manifests'
          token: ${{ secrets.MANIFEST_REPO_PAT }}
      - name: Update image name
        shell: bash
        working-directory: ./manifests/apps/${{ inputs.service-identifier }}/${{ inputs.stage }}/app
        run: |
          sed -i "s/tag: .*/tag: ${{ github.sha }}/" values.yaml
          sed -i "s/revision: .*/revision: ${GITHUB_SHA::8}/" values.yaml
          sed -i "s/build: .*/build: ${{ github.run_number }}/" values.yaml
      - name: Update config
        shell: bash
        working-directory: ./manifests/apps/${{ inputs.service-identifier }}/${{ inputs.stage }}/cluster
        run: |
          # Update previousHash
          previousHash=$(yq e .currentHash config.yaml) yq e '.previousHash = strenv(previousHash)' -i config.yaml
          # Update currentHash
          currentHash=${GITHUB_SHA::8} yq e '.currentHash = strenv(currentHash)' -i config.yaml
      - name: Commit to manifest repository
        working-directory: './manifests'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump docker tag for ${{ inputs.service-identifier }} on ${{ inputs.stage }}"
        shell: bash
      - name: Push
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.MANIFEST_REPO_PAT }}
          directory: './manifests'
          repository: monta-app/kube-manifests
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: always()
        with:
          job-type: "deploy"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}

  deploy_by_argocd:
    if: ${{ ! inputs.push-to-manifests }}
    name: Deploy (ArgoCD)
    needs:
    - push-manifest-list
    - init
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download ArgoCD CLI
        shell: bash
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x argocd
      - name: ArgoCD update application
        shell: bash
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_SERVER: ${{ needs.init.outputs.argocd-server }}
        run: |
          OLD_TAG=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app get argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} --show-params -o yaml | yq -e=0 '.spec.source.helm.parameters[] | select(.name == "kotlin.image.tag").value')
          ./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app patch ${{ inputs.service-identifier }}-${{ inputs.stage }} --patch='[{"op": "replace", "path": "/spec/info/0", "value": {"name": "Source Code Diff", "value": "'"https://github.com/${{ github.repository }}/compare/${OLD_TAG::8}...${GITHUB_SHA::8}"'"}}]'
          ./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app set argocd/${{ inputs.service-identifier }}-${{ inputs.stage }} --helm-set kotlin.revision=${GITHUB_SHA::8} --helm-set kotlin.build=${{ github.run_number }} --helm-set kotlin.image.tag=${GITHUB_SHA}
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: always()
        with:
          job-type: "deploy"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: ${{ inputs.slack-channel-id }}
          slack-message-id: ${{ needs.init.outputs.slack-message-id }}
