name: Deploy
on:
  workflow_call:
    inputs:
      service-name:
        required: false
        type: string
        description: 'Proper name for your service i.e OCPP Service, Vehicle Service'
      service-emoji:
        required: false
        type: string
        description: 'An emoji to identify your service by :)'
      service-identifier:
        required: true
        type: string
        description: 'Identifier of the service being released i.e ocpp, vehicle, server, wallet.'
      gradle-module:
        required: false
        type: string
        description: 'Name of the gradle module being tested'
      region:
        required: true
        type: string
        default: 'eu-west-1'
        description: 'AWS region'
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
      docker-file-name:
        required: false
        type: string
        description: Name of the docker file to be built
        default: "Dockerfile"
      java-version:
        required: false
        type: string
        description: the version of the java docker image to build
        default: "17.0.7"
    secrets:
      GHL_USERNAME:
        required: true
        description: 'Github Username (Gradle plugin)'
      GHL_PASSWORD:
        required: true
        description: 'Github Password (Gradle plugin)'
      AWS_ACCOUNT_ID:
        required: false
        description: 'AWS account id'
      AWS_ACCESS_KEY_ID:
        required: false
        description: 'AWS access key id'
      AWS_SECRET_ACCESS_KEY:
        required: false
        description: 'AWS secret access key'
      MANIFEST_REPO_PAT:
        required: true
        description: 'GitHub personal access token'
      SLACK_APP_TOKEN:
        required: true
        description: 'Slack app token'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read
  actions: read # This is required for 8398a7/action-slack

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "test"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'gradle'
      - name: Test project
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
        run: |
          if [ -z "$GRADLE_MODULE" ]
          then
            ./gradlew --no-daemon test
          else
            ./gradlew --no-daemon $GRADLE_MODULE:test
          fi
        shell: bash
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: |
            build/reports/tests/test
            /home/runner/.gradle/daemon/**/daemon-*.out.log
          retention-days: 2
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "test"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
    outputs:
      slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.runner-type }}
    timeout-minutes: 30
    strategy:
      matrix:
        runner-type:
        - ubuntu-latest
        - [self-hosted, linux, ARM64]
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "build"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ needs.test.outputs.slack-message-id }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Check for secret.AWS_ACCOUNT_ID availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.AWS_ACCOUNT_ID }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi
      - name: Configure AWS credentials via assumed role
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'true'
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-put-image
          role-session-name: push-new-image-to-${{ inputs.service-identifier }}-${{ inputs.stage }}
          aws-region: ${{ inputs.region }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'false'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service-identifier }}-${{ inputs.stage }}
          tags: |
            type=sha,format=long,prefix=,suffix=-${{ runner.arch }}
          flavor: |
            latest=false
            prefix=
            suffix=
      - name: Build
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./${{ inputs.docker-file-name }}
          push: true
          build-args: |
            JAVA_VERSION=${{ inputs.java-version }}
            GHL_USERNAME=${{ secrets.GHL_USERNAME }}
            GHL_PASSWORD=${{ secrets.GHL_PASSWORD }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "build"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
    outputs:
      slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}

  push-manifest-list:
    name: Push Manifest
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check for secret.AWS_ACCOUNT_ID availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.AWS_ACCOUNT_ID }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi
      - name: Configure AWS credentials via assumed role
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'true'
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-put-image
          role-session-name: push-new-image-to-${{ inputs.service-identifier }}-${{ inputs.stage }}
          aws-region: ${{ inputs.region }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.secret-check.outputs.available == 'false'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build-push-manifest
        id: build-container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_NAME: ${{ inputs.service-identifier }}
          STAGE: ${{ inputs.stage }}
          DOCKER_FILE_NAME: ${{ inputs.docker-file-name }}
          JAVA_VERSION: ${{ inputs.java-version }}
        shell: bash
        run: |
          ECR_IMAGE_URL=$ECR_REGISTRY/$SERVICE_NAME-$STAGE
          docker manifest create $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-ARM64 $ECR_IMAGE_URL:${{ github.sha }}-X64
          docker manifest annotate --arch arm64 $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-ARM64
          docker manifest annotate --arch amd64 $ECR_IMAGE_URL:${{ github.sha }} $ECR_IMAGE_URL:${{ github.sha }}-X64
          docker manifest inspect $ECR_IMAGE_URL:${{ github.sha }}
          docker manifest push $ECR_IMAGE_URL:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "deploy"
          job-status: "progress"
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ needs.build.outputs.slack-message-id }}
      - name: Check out manifest repository
        uses: actions/checkout@master
        with:
          repository: monta-app/kube-manifests
          path: 'manifests'
          token: ${{ secrets.MANIFEST_REPO_PAT }}
      - name: Update image name
        shell: bash
        working-directory: ./manifests/apps/${{ inputs.service-identifier }}/${{ inputs.stage }}/app
        run: |
          sed -i "s/tag: .*/tag: ${{ github.sha }}/" values.yaml
          sed -i "s/revision: .*/revision: ${GITHUB_SHA::8}/" values.yaml
          sed -i "s/build: .*/build: ${{ github.run_number }}/" values.yaml
      - name: Commit to manifest repository
        working-directory: './manifests'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump docker tag for ${{ inputs.service-identifier }} on ${{ inputs.stage }}"
        shell: bash
      - name: Push
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.MANIFEST_REPO_PAT }}
          directory: './manifests'
          repository: monta-app/kube-manifests
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "deploy"
          job-status: ${{ job.status }}
          service-name: ${{ inputs.service-name }}
          service-emoji: ${{ inputs.service-emoji }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
