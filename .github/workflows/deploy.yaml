name: Deploy
on:
  workflow_call:
    inputs:
      service-identifier:
        required: true
        type: string
        description: 'Identifier of the service being released'
      gradle-module:
        required: false
        type: string
        description: 'Name of the gradle module being tested'
      region:
        required: true
        type: string
        default: 'eu-west-1'
        description: 'AWS region'
      stage:
        required: true
        type: string
        description: 'stage being released (dev,staging,production)'
      docker-file-name:
        required: false
        type: string
        description: Name of the docker file to be built
        default: "Dockerfile"
      manifest-repository:
        required: true
        type: string
        description: 'Name of the github repository that holds the manifest (ex: repo-owner/repo-name)'
      manifest-app-path:
        required: true
        type: string
        description: 'Path in the repository where the values.yaml is stored'
    secrets:
      GHL_USERNAME:
        required: true
        description: 'Github Username (Gradle plugin)'
      GHL_PASSWORD:
        required: true
        description: 'Github Password (Gradle plugin)'
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS access key id'
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS secret access key'
      MANIFEST_REPO_PAT:
        required: true
        description: 'GitHub personal access token'
      SLACK_APP_TOKEN:
        required: true
        description: 'Slack app token'
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "test"
          job-status: "progress"
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Test project
        env:
          GHL_USERNAME: ${{ secrets.GHL_USERNAME }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          GRADLE_MODULE: ${{ inputs.gradle-module }}
        run: |
          if [ -z "$GRADLE_MODULE" ]
          then
            ./gradlew --no-daemon test
          else
            ./gradlew --no-daemon $GRADLE_MODULE:test
          fi
        shell: bash
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: |
            build/reports/tests/test
            /home/runner/.gradle/daemon/**/daemon-*.out.log
          retention-days: 2
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "test"
          job-status: ${{ job.status }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
    outputs:
      slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "build"
          job-status: "progress"
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ needs.test.outputs.slack-message-id }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build docker container
        id: build-container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ inputs.service-identifier }}
          STAGE: ${{ inputs.stage }}
          DOCKER_FILE_NAME: ${{ inputs.docker-file-name }}
        run: |
          ECR_IMAGE_URL=$ECR_REGISTRY/$SERVICE_NAME-$STAGE
          docker build --build-arg=GHL_USERNAME=${{ secrets.GHL_USERNAME }} --build-arg=GHL_PASSWORD=${{ secrets.GHL_PASSWORD }} -f $DOCKER_FILE_NAME -t $ECR_IMAGE_URL:$IMAGE_TAG .
          docker push $ECR_IMAGE_URL:$IMAGE_TAG
          docker tag $ECR_IMAGE_URL:$IMAGE_TAG $ECR_IMAGE_URL:latest
          docker push $ECR_IMAGE_URL:latest
          echo "::set-output name=ECR_IMAGE_URL:$IMAGE_TAG::$ECR_IMAGE_URL:$IMAGE_TAG"
        shell: bash
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "build"
          job-status: ${{ job.status }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
    outputs:
      slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Publish progress message to slack
        uses: monta-app/slack-notifier-cli-action@main
        id: publish-slack
        with:
          github-context: ${{ toJson(github) }}
          job-type: "deploy"
          job-status: "progress"
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ needs.build.outputs.slack-message-id }}
      - name: Check out manifest repository
        uses: actions/checkout@master
        with:
          repository: ${{ inputs.manifest-repository }}
          path: 'manifests'
          token: ${{ secrets.MANIFEST_REPO_PAT }}
      - name: Update image name
        shell: bash
        working-directory: ${{ inputs.manifest-app-path }}
        run: |
          sed -i "s/tag: .*/tag: ${{ github.sha }}/" values.yaml
          sed -i "s/revision: .*/revision: ${GITHUB_SHA::8}/" values.yaml
          sed -i "s/build: .*/build: ${{ github.run_number }}/" values.yaml
      - name: Commit to manifest repository
        working-directory: './manifests'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump docker tag for ${{ inputs.service-identifier }} on ${{ inputs.stage }}"
        shell: bash
      - name: Push
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.MANIFEST_REPO_PAT }}
          directory: './manifests'
          repository: ${{ inputs.manifest-repository }}
      - name: Publish result message to slack
        uses: monta-app/slack-notifier-cli-action@main
        if: ${{ always() }}
        with:
          github-context: ${{ toJson(github) }}
          job-type: "deploy"
          job-status: ${{ job.status }}
          slack-app-token: ${{ secrets.SLACK_APP_TOKEN }}
          slack-channel-id: "C01KL9FUPNK"
          slack-message-id: ${{ steps.publish-slack.outputs.slack-message-id }}
