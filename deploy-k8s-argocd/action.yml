name: 'Deploy to k8s cluster using ArgoCD'
description: |
  Deploy to k8s cluster using ArgoCD by settings the kotlin.image.tag attribute on the Helm chart. 

inputs:
  service-identifier:
    description: 'k8s service/deploy name'
    required: true
  docker-image-tag:
    description: 'Docker image tage to deploy'
    required: true
  environment:
    description: 'Monta environment (prepend to the name)'
    required: true
  argocd-token:
    description: 'Token for talking with ArgoCD server'
    required: true

runs:
  using: composite
  steps:
    - name: 'Validate inputs'
      shell: bash
      run: |
        if [[ "${{ inputs.service-identifier }}" =~ ^[a-z0-9\-]{1,64}$ ]];
        then
          echo "Service to deploy: ${{ inputs.service-identifier }}";
        else
          echo "Invalid service identifier: ${{ inputs.service-identifier }}";
          exit 1;
        fi
        if [[ "${{ inputs.docker-image-tag }}" =~ ^[a-f0-9]{40}$ ]];
        then
          echo "Docker image tag to deploy: ${{ inputs.docker-image-tag }}";
        else
          echo "Invalid docker image tag: ${{ inputs.docker-image-tag }}";
          exit 1;
        fi
        if [[ "${{ inputs.environment }}" =~ ^(dev|staging|production)$ ]];
        then
          echo "Environment deploy to: ${{ inputs.environment }}";
        else
          echo "Invalid environment name: ${{ inputs.environment }}";
          exit 1;
        fi
        if [ -z "${{ inputs.argocd-token }}" ]
        then
          echo "input argocd-token is empty, aborting.";
          exit 1;
        fi
    - name: 'Set ArgoCD server endpoint'
      id: set-argocd-server
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      shell: bash
      run: |
        if [[ $ENVIRONMENT =~ dev|staging ]]; then
          ARGOCD_SERVER="argocd.staging.monta.app"
        else
          ARGOCD_SERVER="argocd.monta.app"
        fi
        echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV

    - name: 'Download ArgoCD CLI'
      shell: bash
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo chmod +x argocd

    - name: 'ArgoCD update application'
      env:
        ARGOCD_TOKEN: ${{ inputs.argocd-token }}
      shell: bash
      run: |
        OLD_TAG=$(./argocd --grpc-web --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER app get argocd/${{ inputs.service-identifier }}-${{ inputs.environment }} --show-params -o yaml | yq -e=0 '.spec.source.helm.parameters[] | select(.name == "kotlin.image.tag").value')
        ./argocd --grpc-web \
          --auth-token $ARGOCD_TOKEN \
          --server $ARGOCD_SERVER app patch ${{ inputs.service-identifier }}-${{ inputs.environment }} \
          --patch='[{"op": "replace", "path": "/spec/info/0", "value": {"name": "Source Code Diff", "value": "'"https://github.com/${{ github.repository }}/compare/${OLD_TAG::8}...${GITHUB_SHA::8}"'"}}]'
        echo "Updating docker image tag from ${OLD_TAG} to ${{ inputs.docker-image-tag }}"
        ./argocd --grpc-web \
          --auth-token $ARGOCD_TOKEN \
          --server $ARGOCD_SERVER \
          app set argocd/${{ inputs.service-identifier }}-${{ inputs.environment }} \
          -p kotlin.revision=${GITHUB_SHA::8} \
          -p kotlin.build=${{ github.run_number }} \
          -p kotlin.image.tag=${{ inputs.docker-image-tag }}
